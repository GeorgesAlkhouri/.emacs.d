;-*- eval: (load-file "./init-dev.el");   -*-
#+title: My Emacs Configuration
#+property: header-args :mkdirp yes :tangle yes :tangle-mode (identity #o444) :results silent :noweb yes

Idea and basics from https://github.com/progfolio/.emacs.d

* An Explanation
This is a literate configuration for =Emacs=.
Tangling this file creates two Elisp files, =~/.emacs.d/init.el= and =~/.emacs.d/early-init.el=.

** Todos
- fix python mode when using tramp
- env variable (DONE when started from shell)
- add emacs application framework
- add venv to mode-line
- reload bash config for helm
- let emacs setup OSH if not already setup
- when loading saved persp file also switch project correctly to load venv 
    
* Requirements
Dependencies you need to fully run all configured features:
- ag
- vterm requirements
- pyright, black, flake8, pylint, isort, mypy, virtualenv, virtualenvwrapper
- shellcheck
- git and git-flow

* Tangle
 
Start with =make tangle= to create the init.el and early-init.el from this org file.

* Bootstrapping
** early-init
:PROPERTIES:
:header-args: :tangle-mode (identity #o444) :results silent :tangle ~/.emacs.d/early-init.el
:END:
Emacs 27.0 introduced an early-init file. It allows customization before package and UI initialization.
#+begin_src emacs-lisp
;;; early-init.el --- Emacs pre package.el & GUI configuration -*- lexical-binding: t; -*-
;;; Code:
#+end_src

We want the latest version of Org mode.

Removing the Emacs bundled version from the load-path *should* prevent loading mixed Org versions.
e.g. After updating Org mode.
#+begin_src emacs-lisp
(when-let (orglib (locate-library "org" nil load-path))
  (setq-default load-path (delete (substring (file-name-directory orglib) 0 -1)
                                  load-path)))
#+end_src

Save some time at startup.
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

*** Debugging

Silence native compilation compiler warnings for as they can be pretty disruptive.
#+begin_src emacs-lisp :tangle yes
(setq native-comp-async-report-warnings-errors nil)
#+end_src

Running this form will launch the debugger after loading a package.
This is useful for finding out when a dependency is requiring a package (perhaps earlier than you want).
Use by tangling this block and launching Emacs with =emacs --debug-init=.
#+begin_src emacs-lisp :var file="" :results silent :tangle no
(unless (string-empty-p file)
  (eval-after-load file
    '(debug)))
#+end_src

Similarly, this variable will hit the debugger when a message matches its regexp.
#+begin_src emacs-lisp :tangle no
(setq debug-on-message "")
#+end_src

Adding a variable watcher can be a useful way to track down initialization and mutation of a variable.
#+begin_src emacs-lisp :tangle no
(add-variable-watcher 'org-capture-after-finalize-hook
                      (lambda (symbol newval operation where)
                        (debug)
                        (message "%s set to %s" symbol newval)))
#+end_src

*** initial-major-mode
Prevent the *scratch* buffer from loading a mode.
#+begin_src emacs-lisp :tangle no
(setq initial-major-mode 'fundamental-mode)
#+end_src

*** file-name-handler-alist
Skipping a bunch of regular expression searching in the =file-name-handler-alist= should improve start time.
#+begin_src emacs-lisp
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
#+end_src

*** gc-cons threshold
Emacs collects garbage every 800KB.
This is overly aggressive on a modern machine during our init.
Temporarily turning it off should decrease startup times.
Resetting it afterward will ensure that normal operations don't suffer from a large GC period.

I'm still not sure on the optimal gc-cons-threshold value. The following is a
table of values from popular Emacs configurations.

| Distribution | gc-cons-threshold |
|--------------+-------------------|
| Default      |            800000 |
| Doom         |          16777216 |
| Spacemacs    |         100000000 |

#+begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)

(defun +gc-after-focus-change ()
  "Run GC when frame loses focus."
  (run-with-idle-timer
   5 nil
   (lambda () (unless (frame-focus-state) (garbage-collect)))))
#+end_src

#+begin_src emacs-lisp
(defun +reset-init-values ()
  (run-with-idle-timer
   5 nil
   (lambda ()
     (setq file-name-handler-alist default-file-name-handler-alist
           gc-cons-threshold 100000000)
     (message "gc-cons-threshold & file-name-handler-alist restored")
     (when (boundp 'after-focus-change-function)
       (add-function :after after-focus-change-function #'+gc-after-focus-change)))))

(add-hook 'emacs-startup-hook '+reset-init-values)
#+end_src

*** read process output max value
Enlargen the maximum number of bytes to read from subprocess in a single chunk.
Good for speeding up language servers.

#+begin_src emacs-lisp
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

*** UI
Turning off these visual elements before UI initialization should speed up init.
#+begin_src emacs-lisp
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

Implicitly resizing the Emacs frame adds to init time.
Fonts larger than the system default can cause frame resizing, which adds to startup time.
#+begin_src emacs-lisp
(setq frame-inhibit-implied-resize t)
#+end_src

Set default and backup fonts.

Font sources are:
- https://github.com/JetBrains/JetBrainsMono/releases/tag/v2.242
- https://github.com/tonsky/FiraCode/releases/download/5.2/Fira_Code_v5.2.zip
  

#+begin_src emacs-lisp
  (push '(font . "JetBrains Mono") default-frame-alist)
  (push '(font . "Fira Code") default-frame-alist)
  (set-face-font 'default "JetBrains Mono")
  (set-face-font 'variable-pitch "Fira Code")
  (copy-face 'default 'fixed-pitch)
#+end_src
Ignore X resources.
#+begin_src emacs-lisp
(advice-add #'x-apply-session-resources :override #'ignore)
#+end_src


Taken from:

[[https://github.com/vsemyonoff/emacsrc/blob/14649a5bafea99cc7e13e7d048e9d15aed7926ce/early-init.el]]

This helps with a bug I was hitting when using =desktop-save-mode='s =desktop-read=.
#+begin_src emacs-lisp
(setq desktop-restore-forces-onscreen nil)
#+end_src

*** provide early-init
#+begin_src emacs-lisp
(provide 'early-init)
;;; early-init.el ends here
#+end_src

** lexical binding
The following line turns on lexical binding for performance reasons.
#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

** Straight package manager
#+begin_quote
straight.el: next-generation, purely functional package manager for the Emacs hacker.

https://github.com/raxod502/straight.el
#+end_quote
Straight installs packages directly from there git repository.

Bootstrap straight
*Troubleshoot*:
#+begin_quote
Sometimes, in a corporate environment, url-retrieve-synchronously may not work and straight.el
will be unable to download the installation script mentioned in the bootstrap snippet.
In this case, you may simply clone this repository into ~/.emacs.d/straight/repos/straight.el and
check out your desired revision/branch.
#+end_quote

#+begin_src emacs-lisp
(setq straight-repository-branch "develop")
(setq straight-check-for-modifications '(check-on-save))
(setq straight-use-package-by-default t)
(setq straight-vc-git-default-protocol 'https)
(setq straight-vc-git-force-protocol nil)
(defvar bootstrap-version)
;;(setq straight-host-usernames '((github . "progfolio")
;;                                (gitlab . "iarchivedmywholelife")))
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

*** Install org-contrib
Installing it this early *should* prevent mixed Org installations.
#+begin_src emacs-lisp
(straight-use-package 'org-contrib)
#+end_src

** profiling
This function displays how long Emacs took to start.
It's a rough way of knowing when/if I need to optimize my init file.
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs loaded in %s with %d garbage collecitons."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src
** packaging

*** use-package
#+begin_src emacs-lisp
  (defmacro use-feature (name &rest args)
  "Like `use-package' but with `straight-use-package-by-default' disabled.
NAME and ARGS are in `use-package'."
  (declare (indent defun))
  `(use-package ,name
     :straight nil
     :ensure nil
     ,@args))
#+end_src

#+begin_src emacs-lisp
(straight-use-package 'use-package)
(eval-when-compile
  (require 'use-package))
#+end_src

#+begin_src emacs-lisp
(setq init-file-debug nil)
(if init-file-debug
    (setq use-package-verbose t
          use-package-expand-minimally nil
          use-package-compute-statistics t
          debug-on-error t)
  (setq use-package-verbose nil
        use-package-expand-minimally t))
#+end_src

** define constants

#+begin_src emacs-lisp
  (defconst *sys/win32*
    (eq system-type 'windows-nt)
    "Are we running on a Win system?")
  
  (defconst *sys/linux*
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")
  
  (defconst *sys/mac*
    (eq system-type 'darwin)
    "Are we running on a Mac system?")
  
  (defconst *sys/project-home*
    "~/Devel")
  
  (defconst sys/leader-key "SPC"
    "The default leader key.")
  
  (defconst sys/leader-secondary-key "S-SPC"
    "The secondary leader key.")
  
  (defconst sys/major-leader-key ","
    "The default major mode leader key.")
  
  (defconst sys/major-leader-secondary-key "M-,"
    "The secondary major mode leader key.")
  
  (defconst *sys/shell-history-file* "~/.bash_history")
  (defconst *sys/shell-config-file* "~/.bashrc")
  
  (cond (*sys/mac*
	 (defconst *sys/font-default-height* 132)
	 (defconst *sys/shell-executable* "/usr/local/bin/bash")
	 )
	(*sys/linux*
	 (defconst *sys/font-default-height* 130)
	 (defconst *sys/shell-executable* "/bin/bash")
	 ))
  
  (defun sys/activate-venv ()
    "Auto activated venv when project folder name is in list of available venvs"
    (when
	(and (derived-mode-p 'python-mode) (projectile-project-root))
      (let
	  (
	   (project-dir
	    (file-name-nondirectory
	     (directory-file-name
	      (file-name-directory (projectile-project-root))))))
	(if (member project-dir (venv-get-candidates))
	    (progn
	      (message "Switch venv: %s" project-dir)
	      (venv-workon project-dir))
	  (progn
	    (message "%s not found. venv deactivated" project-dir)
	    (venv-deactivate))))))
#+end_src

** additional setup

After start up do some UI changes.

#+begin_src emacs-lisp
  (defun after-startup ()
    (set-face-attribute 'default nil :height *sys/font-default-height*)
    (set-face-attribute 'variable-pitch nil :height *sys/font-default-height*)
    ;; Faster than scp
    (setq tramp-default-method "ssh")
    ;; When buffer is closed, saves the cursor location
    (save-place-mode t)
    (toggle-frame-maximized)
    (global-hl-line-mode t)
    (solaire-global-mode t)
    (load-theme 'doom-one-light t)
    )
  (add-hook 'after-init-hook #'after-startup)
#+end_src

Enable  line numbers for prog-mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode) 
#+end_src

* Packages
** evil
#+begin_quote

Evil is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.
[...] evil-collection assumes evil-want-keybinding is set to nil and evil-want-integration is set to t before loading evil and evil-collection.

https://github.com/emacs-evil/evil
#+end_quote

#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :init
    (setq evil-want-integration t)
    (setq evil-undo-system 'undo-redo)
    (setq evil-want-keybinding nil)
    :hook (after-init . evil-mode))
#+end_src

*** evil-collection
#+begin_quote
This is a collection of Evil bindings for the parts of Emacs that Evil does not cover properly by default.

https://github.com/emacs-evil/evil-collection
#+end_quote
#+begin_src emacs-lisp
   (use-package evil-collection
     :after (evil)
     :config
  ;;Whether to setup Evil bindings in the minibuffer.
  (setq evil-collection-setup-minibuffer t)
  (evil-collection-init)
   )
#+end_src

** general (key-bindings)
#+begin_quote
general.el provides a more convenient method for binding keys in emacs (for both evil and non-evil users).

https://github.com/noctuid/general.el#about
#+end_quote

Load general before the remaining packages so they can make use of the ~:general~ keyword in their declarations.

#+begin_src emacs-lisp
  (use-package general
    :demand t
    :init
    (progn
      (setq general-override-states '(insert emacs hybrid normal visual motion operator replace)))
    :config
    (progn
  
      (defun sys/major-mode-name (arg)
	(cons
	 (cadr (split-string (car arg) " "))
	 (replace-regexp-in-string
	  "-mode$"
	  ""
	  (symbol-name major-mode))))
  
      (general-evil-setup)
  
      (general-create-definer
	global-leader
	:keymaps 'override
	:states '(normal insert emacs motion visual)
	:prefix sys/leader-key
	:non-normal-prefix sys/leader-secondary-key)
  
      (general-create-definer
	global-major-leader
	:keymaps 'override
	:states '(normal insert emacs motion viusal)
	:prefix sys/major-leader-key
	:non-normal-prefix sys/major-leader-secondary-key
	"" '(:ignore t :which-key sys/major-mode-name))
  
      (general-nmap "SPC m" (general-simulate-key "," :which-key "major-mode"))
  
      (global-leader
	"a" '(:ignore t :wk "applications")
  
	"b" '(:ignore t :wk "buffers")
	"bx"  'kill-current-buffer
	"bd"  'dired
	"bD" 'dired-jump
	"bm" '((lambda () (interactive) (switch-to-buffer "*Messages*"))
	       :which-key "messages-buffer")
	"bs" '((lambda () (interactive) (switch-to-buffer "*scratch*"))
	       :which-key "scratch-buffer")
  
	"f" '(:ignore t :wk "files")
	"fe" '(:ignore t :which-key "env")
	"fed" '((lambda () (interactive) (find-file (expand-file-name "init.org" user-emacs-directory))) :which-key "init.org")
	"feb" '((lambda () (interactive) (find-file *sys/shell-config-file*)) :which-key ".bashrc")
	"fep" '(straight-freeze-versions :which-key "freeze packages")
  
	"g" '(:ignore t :wk "git")
	"h" '(:ignore t :wk "help")
	"s" '(:ignore t :wk "search")
	"S" '(:ignore t :wk "spelling")
	"t" '(:ignore t :wk "themes")
  
	"w" '(:ignore t :wk "windows")
	"w?" 'split-window-vertically
	"w=" 'balance-windows-area
	"w/" 'split-window-horizontally
	"wH" 'evil-window-move-far-left
	"wJ" 'evil-window-move-very-bottom
	"wK" 'evil-window-move-very-top
	"wL" 'evil-window-move-far-right
	"wd" 'delete-window
	"wh" 'windmove-left
	"wj" 'windmove-down
	"wk" 'windmove-up
	"wl" 'windmove-right
	"wo" 'other-window
	"wO" 'delete-other-windows
	"wx" 'kill-buffer-and-window
	"wX" '((lambda () (interactive) (call-interactively #'other-window) (kill-buffer-and-window))
	       :which-key "kill-other-buffer-and-window")
  
	"!" 'shell-command
	":" 'eval-expression
	"TAB" '((lambda () (interactive) (switch-to-buffer nil))
		:which-key "other-buffer")
  
  
  
	)))
#+end_src

** which-key
#+begin_quote
which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

https://github.com/justbur/emacs-which-key
#+end_quote
#+begin_src emacs-lisp
  (use-package which-key
    :demand t
    :config
    (which-key-mode)
    :custom
    (which-key-side-window-location 'bottom)
    (which-key-sort-order 'which-key-key-order-alpha)
    (which-key-side-window-max-width 0.33)
    (which-key-idle-delay 0.75)
    :diminish )
#+end_src

** magit
#+begin_quote
Magit is an interface to the version control system Git, implemented as an Emacs package.

https://magit.vc/
#+end_quote
#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :after (general)
    :general
    (global-leader
      "gb"  'magit-blame
      "gi"  'magit-init
      "gs"  'magit-status
      )
    :config
    (transient-bind-q-to-quit))
#+end_src


*** magit-gitflow
Plugin in for git-flow in magit.

https://github.com/jtatarik/magit-gitflow

#+begin_src emacs-lisp
  (use-package magit-gitflow
    :defer t
    :init (setq magit-gitflow-popup-key "%")
    ;; TODO add % key to magit-dispatch-popup
    ;; https://magit.vc/manual/magit-popup.html#Customizing-Existing-Popups
    ;; :config
    ;; (progn
    ;;   (magit-define-popup-action 'magit-dispatch-popup
    ;;    "%" "Git Flow" 'magit-gitflow-popup t))
    :hook (magit-mode . magit-gitflow-mode)
    :general
    (general-def magit-mode-map
      "%" 'magit-gitflow-popup)
    )
#+end_src

** company
#+begin_quote
Company is a text completion framework for Emacs.
The name stands for "complete anything".
It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

http://company-mode.github.io/
#+end_quote
#+begin_src emacs-lisp
  (use-package company
    :hook ((prog-mode) . company-mode)
    :diminish
    :general
    (general-def company-active-map
      "C-k"    'company-select-previous
      "C-j"    'company-select-next
      "<tab>"    'company-complete-common-or-cycle
      "S-<tab>"    'company-select-previous
      ;;for x11 https://emacs.stackexchange.com/a/53469
      "S-<iso-lefttab>" 'company-select-previous)
    :config
    (setq company-tooltip-align-annotations t
	  company-idle-delay 0.01
	  company-minimum-prefix-length 2
	  company-require-match 'never)
    )
#+end_src

** helm
#+begin_quote
Helm is an Emacs framework for incremental completions and narrowing selections.

https://github.com/emacs-helm/helm
#+end_quote
#+begin_src emacs-lisp
  (use-package helm
    :init (require 'helm-config)
    :diminish
    :defer 1
    :config
    (helm-mode)
    :general
    (general-def helm-map "<tab>" 'helm-execute-persistent-action)
    (general-def helm-map "TAB" 'helm-execute-persistent-action)
    (general-def helm-map "C-a" 'helm-select-action)
    (general-def helm-map "C-h" 'helm-find-files-up-one-level)
    (general-def helm-map "C-j" 'helm-next-line)
    (general-def helm-map "C-k" 'helm-previous-line)
    (global-leader
      "SPC" '(helm-M-x :which-key "M-x")
      "/"   'helm-projectile-ag
      "ss" 'helm-occur
      "ff" 'helm-find-files
      "fF" 'helm-find
      "fr" 'helm-recentf
      "bb" 'helm-mini
      "ji" 'helm-imenu)
    )
#+end_src

*** helm-ag
#+begin_quote
helm-ag.el provides interfaces of The Silver Searcher with helm.

https://github.com/emacsorphanage/helm-ag
#+end_quote
#+begin_src emacs-lisp :lexical t
(use-package helm-ag
  :commands (helm-ag helm-projectile-ag))
#+end_src

*** helm-projectile
#+begin_src emacs-lisp
  (use-package helm-projectile
    :after (helm)
    :general
    (global-leader
      "pb" 'helm-projectile-switch-to-buffer
      "pd" 'helm-projectile-find-dir
      "pf" 'helm-projectile-find-file
      "pp" 'helm-projectile-switch-project
      "pr" 'helm-projectile-recentf)
    )
#+end_src

** projectile
#+begin_quote
Projectile is a project interaction library for Emacs.
Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible).

https://github.com/bbatsov/projectile
#+end_quote
#+begin_src emacs-lisp
  (use-package projectile
    :after (general)
    :general
    (global-leader
      "p!" 'projectile-run-shell-command-in-root
      "pD" 'projectile-dired
      "pe" 'projectile-edit-dir-locals
      "pR" 'projectile-replace)
    :config
    (progn
      (defun sys/switch-project-action ()
	"Switch to a workspace with the project name."
	(persp-switch (projectile-project-name))
	(projectile-find-file))
      (setq projectile-project-search-path (list *sys/project-home*))
      (setq projectile-switch-project-action #'sys/switch-project-action)
      (add-to-list 'projectile-globally-ignored-directories "site-packages")
      (projectile-mode t))
    )
#+end_src

** vterm
#+begin_quote
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm, a C library.

https://github.com/akermu/emacs-libvterm
#+end_quote
#+begin_src emacs-lisp
  (use-package vterm
    :straight (:post-build (cl-letf (((symbol-function #'pop-to-buffer)
				      (lambda (buffer) (with-current-buffer buffer (message (buffer-string))))))
			     (setq vterm-always-compile-module t)
			     (require 'vterm)))
    :commands (vterm vterm-other-window)
    :general
    (global-leader "at" '(:ignore t :which-key "terminal")
      "att" 'vterm-other-window
      "at." 'vterm
      )
    (general-def vterm-mode-map "C-r" 'helm-vterm-search-history :states '(normal emacs))
    (general-def vterm-mode-map "C-l" 'vterm-clear :states '(normal emacs))
    ;; copied from spacemacs
    :config
    (setq vterm-shell *sys/shell-executable*)
    (defun vterm-make-history-candidates ()
      (with-temp-buffer
	(insert-file-contents *sys/shell-history-file*)
	(reverse
	 (delete-dups
	  (split-string (buffer-string) "\n")))))
    (defun helm-vterm-search-history ()
      "Narrow down bash history with helm."
      (interactive)
      (cl-assert (string-equal mode-name "VTerm") nil "Not in VTerm mode")
      (helm :sources (helm-build-sync-source "Bash history"
		       :candidates (vterm-make-history-candidates)
		       :action #'vterm-send-string)
	    :buffer "*helm-bash-history*"
	    :candidate-number-limit 10000))
  
    (evil-set-initial-state 'vterm-mode 'emacs)
    (add-hook 'vterm-mode-hook #'(lambda () (setq-local global-hl-line-mode nil)))
    )
#+end_src

** diminish
#+begin_quote
This package implements hiding or abbreviation of the mode line displays (lighters) of minor-modes.

https://github.com/emacsmirror/diminish
#+end_quote
#+begin_src emacs-lisp :lexical t
(use-package diminish
  :defer 3)
#+end_src

** expand-region
#+begin_quote
Expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want.

https://github.com/magnars/expand-region.el

See also
https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#why-do-non-evil-users-get-expand-region-but-not-evil-users
to learn about the VIM way.
#+end_quote
#+begin_src emacs-lisp
  (use-package expand-region
    :commands er/expand-region
    :config
    (setq expand-region-contract-fast-key "V"
	  expand-region-reset-fast-key "r")
    :general
    (global-leader
      "v"   'er/expand-region)
    )
#+end_src
** Development
Following packages are used majorly for programming

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :defer t
    :hook (prog-mode . highlight-indent-guides-mode)
    :if (display-graphic-p)
    :diminish
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-responsive 'top)
    (setq highlight-indent-guides-delay 0)
    (setq highlight-indent-guides-auto-character-face-perc 7)
    )
#+end_src


*** evil-nerd-commenter
#+begin_quote
A Nerd Commenter emulation, help you comment code efficiently.

https://github.com/redguardtoo/evil-nerd-commenter
#+end_quote

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :commands evilnc-comment-or-uncomment-lines
    :general
    (global-leader
      ";" '(evilnc-comment-or-uncomment-lines :which-key "evil-comment"))
    )
#+end_src

*** lsp-mode
#+begin_quote
Client for Language Server Protocol.
lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company, flycheck and projectile.
#+end_quote

#+begin_src emacs-lisp
  (use-package lsp-mode
    :defer t
    :hook ((python-mode) . lsp-deferred)
    :commands lsp
    :config
    ;; disable flycheck override with lsp checker in python-mode
    (setq lsp-diagnostics-disabled-modes '(python-mode))
    (setq lsp-keep-workspace-alive nil)
    :general
    (global-major-leader :keymaps 'python-mode-map
      "r" 'lsp-rename
      "g" '(:ignore t :which-key "goto") "gd" 'evil-goto-definition
      ))
  
  (use-package lsp-ui
    :after lsp-mode
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-ignore-duplicate t)
    )
#+end_src

**** helm-lsp

#+begin_quote
This package provides alternative of the build-in lsp-mode xref-appropos which provides as you type completion.

https://github.com/emacs-lsp/helm-lsp
#+end_quote
Disabled because of [[https://github.com/emacs-lsp/helm-lsp/issues/19][issue]]
#+begin_src emacs-lisp :tangle no
  (use-package helm-lsp
    :after lsp-mode
    :commands helm-lsp-workspace-symbol)
#+end_src

*** flycheck
#+begin_quote
Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs, intended as replacement for the older Flymake extension which is part of GNU Emacs.

https://www.flycheck.org/en/latest/
#+end_quote
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :init
    (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)
    (add-hook 'sh-mode-hook #'flycheck-mode)
    (add-hook 'python-mode-hook #'(lambda ()
				    (flycheck-mode)
				    ;; checker setup locally for python-mode
				    ;; explicitly set flake8 checker
				    ;; implicitly set mypy and pylint in checker chain
				    (setq-local flycheck-checker 'python-flake8)
				    ;; safe time and just determine the line of error
				    (setq-local flycheck-highlighting-mode 'lines)))
    :custom (flycheck-emacs-lisp-load-path 'inherit "necessary with straight.el")
    )
#+end_src

*** format-all
#+begin_quote
Lets you auto-format source code in many languages using the same command for all languages, instead of learning a different Emacs package and formatting command for each language.

https://github.com/lassik/emacs-format-all-the-code
#+end_quote

#+begin_src emacs-lisp
  (use-package format-all
    :defer t
    :commands format-all-buffer
    ;; Format elisp
    :general
    (global-major-leader
      :keymaps
      'emacs-lisp-mode-map
      "b"
      '(:ignore t :which-key "buffers")
      "bf"
      'format-all-buffer)
    ;; :hook ((python-mode) . format-all-mode)
    )
#+end_src

*** Python

**** importmagic.el
Emacs package which tries to suggest imports for unresolved symbols.

https://github.com/anachronic/importmagic.el

#+begin_src emacs-lisp
  (use-package importmagic
    :defer t
    :init
    (add-hook 'venv-postactivate-hook  #'importmagic-mode)
    :general
    (global-major-leader :keymaps 'python-mode-map
      "i" '(importmagic-fix-imports :which-key "fix imports")))
#+end_src

**** lsp-pyright
#+begin_src emacs-lisp
  (use-package lsp-pyright
  :defer t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))
#+end_src

**** virtualenvwrapper
#+begin_quote
A featureful virtualenv tool for Emacs. Emulates much of the functionality of Doug Hellmann's virtualenvwrapper.

https://github.com/porterjamesj/virtualenvwrapper.el
#+end_quote
#+begin_src emacs-lisp
  (use-package virtualenvwrapper
    :commands
    (venv-projectile-auto-workon
     venv-list-virtualenvs
     venv-get-candidates)
    :init
    (add-hook 'projectile-after-switch-project-hook
	      #'sys/activate-venv))
#+end_src

**** blacken
#+begin_src emacs-lisp
      (use-package blacken :defer t :commands blacken-buffer
        ;; only format buffer when in python-mode
        :init (add-hook 'before-save-hook #'(lambda () (when (derived-mode-p 'python-mode)
           (blacken-buffer)
           )))
      )
#+end_src

**** pytest-el
https://github.com/ionrock/pytest-el

- FIX  Package cl is deprecated
#+begin_src emacs-lisp
  (use-package pytest :defer t
    :commands (pytest-one ptytest-module pytest-all)
    :config (add-to-list 'pytest-project-root-files "setup.cfg")
    :general
    (global-major-leader :keymaps 'python-mode-map
      "t" '(:ignore t :which-key "testing")
      "tt" 'pytest-one
      "ta" 'pytest-all
      "tb" 'pytest-module
      )
    )
#+end_src

**** py-isort
#+begin_src emacs-lisp
  (use-package py-isort
    :commands py-isort-before-save
    :init
  ;;isort checks if in python-mode
    (add-hook 'before-save-hook 'py-isort-before-save))
#+end_src
** Themes

https://github.com/hlissner/emacs-doom-themes
  
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t
	  doom-themes-treemacs-theme "doom-atom") ; if nil, italics is universally disabled
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    (doom-themes-treemacs-config)
    :general
    (global-leader "tt" '(:ignore t :which-key "choose themes")
      "tt1" '((lambda () (interactive)
		(load-theme 'doom-one t))
	      :which-key "doom-one")
      "tt2" '((lambda () (interactive)
		(load-theme 'doom-one-light t))
	      :which-key "doom-one-light")
      )
    )
#+end_src

** doom-modeline
#+begin_quote
A fancy and fast mode-line inspired by minimalism design.

https://github.com/seagle0128/doom-modeline
#+end_quote
*Troubleshoot*
It could happen that when behind a proxy you have to manually download the fonts for the /all-the-icons.el/ package included
in doom-modeline.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :defer t
    :config
    (setq doom-modeline-height 30)
    (setq doom-modeline-buffer-file-name-style 'truncate-all)
    :hook
    (after-init . doom-modeline-mode))
#+end_src

** solaire
#+begin_quote
solaire-mode is an aesthetic plugin designed to visually distinguish "real" buffers (i.e. file-visiting code buffers where you do most of your work) from "unreal" buffers
(like popups, sidebars, log buffers, terminals, etc) by giving the latter a slightly different -- often darker -- background

https://github.com/hlissner/emacs-solaire-mode
#+end_quote

#+begin_src emacs-lisp
  (use-package solaire-mode
    :defer t)
#+end_src

** Hyda
 Hydra helps to design transient key bindings.

 https://github.com/abo-abo/hydra
 #+begin_src  emacs-lisp
   (use-package hydra
     :defer t
     :config
     (defhydra hydra-text-scale (:timeout 4)
       "scale text"
       ("j" text-scale-increase "in")
       ("k" text-scale-decrease "out")
       ("q" nil "finished" :exit t))
     :general
     (global-leader
       "ts" '(hydra-text-scale/body :which-key "scale text"))
     )
 #+end_src
** flyspell
#+begin_quote
Flyspell enables on-the-fly spell checking in Emacs by the means of a minor mode.

http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html
#+end_quote

- FIX ispell starts also in init major mode which is fundamental mode
- TODO add German dict to ispell
- TODO add cycling hydra menu for spell checking

#+begin_src emacs-lisp
   (use-feature flyspell
    :defer t
    :hook ((prog-mode . flyspell-prog-mode)
           (text-mode . flyspell-mode))
    :config
    ;; better performance, see https://www.emacswiki.org/emacs/FlySpell#h5o-3
    (setq flyspell-issue-message-flag nil)
  )
#+end_src

** flyspell-correct
#+begin_quote
Correcting misspelled words with flyspell using favourite interface.
Helm in this case.

https://github.com/d12frosted/flyspell-correct
#+end_quote

#+begin_src emacs-lisp
  (use-package flyspell-correct
    :defer t
    :after flyspell
    :general
    (global-leader
      "Sc" '(flyspell-correct-wrapper :which-key "check"))
    )
  
  (use-package flyspell-correct-helm
    :defer t
    :after flyspell-correct)
#+end_src

* winner
Winner Mode is a global minor mode that allows you to “undo” and “redo” changes in WindowConfiguration
(Changes in window state).
#+begin_src emacs-lisp
  (use-package winner
    :defer 3
    :general
    (global-leader
      "wu" 'winner-undo
      "wr" 'winner-redo)
    :config
    (add-to-list 'winner-boring-buffers "*Help*")
    (winner-mode t))
#+end_src

** winum
#+begin_quote
Window numbers for Emacs: Navigate your windows and frames using numbers !

https://github.com/deb0ch/emacs-winum
#+end_quote

#+begin_src emacs-lisp
   (use-package winum
     :defer 1
     :config
   (setq winum-auto-assign-0-to-minibuffer nil
             winum-auto-setup-mode-line nil
             winum-ignored-buffers '(" *LV*" " *which-key*"))
  (global-leader "0" 'winum-select-window-0
    "1" 'winum-select-window-1
        "2" 'winum-select-window-2
        "3" 'winum-select-window-3
        "4" 'winum-select-window-4
        "5" 'winum-select-window-5
        "6" 'winum-select-window-6
        "7" 'winum-select-window-7
        "8" 'winum-select-window-8
        "9" 'winum-select-window-9)
  ;; Rename the entry winum 0-9 at SPC root, to 0..9
  (push '(("\\(.*\\) 0" . "winum-select-window-0") . ("\\1 0..9" . "window 0..9"))
      which-key-replacement-alist)
  (push '((nil . "winum-select-window-[1-9]") . t) which-key-replacement-alist)
    (winum-mode))
#+end_src

** shackle
#+begin_quote
Enforce rules for popup windows

https://depp.brause.cc/shackle/
#+end_quote

#+begin_src emacs-lisp
  (use-package shackle :defer t
    :commands (shackle-mode)
    :custom (shackle-rules '(("*Flycheck errors*"  :align below :size 0.15)
                             ("*vterm*" :align below :size 0.3)
                             ("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.4)
                             (magit-status-mode :select t)
                             ))
    :hook ((flycheck-mode global-flycheck-mode helm-mode magit-mode) . shackle-mode))
#+end_src

** smartparens
#+begin_quote
Smartparens is a minor mode for dealing with pairs in Emacs.

https://github.com/Fuco1/smartparens
#+end_quote

#+begin_src emacs-lisp
  (use-package smartparens
  :defer t
  :hook ((prog-mode org-mode) . smartparens-mode))
#+end_src

** paran
Show matching delimiters highlighted.

#+begin_src emacs-lisp
(use-feature paren
  :defer 1
  :config (show-paren-mode t))
#+end_src

** compile
#+begin_src emacs-lisp
    (use-feature compile
    :config
    (setq compilation-scroll-output 'first-error)
    (defun +compilation-colorize ()
      "Colorize from `compilation-filter-start' to `point'."
      (require 'ansi-color)
      (let ((inhibit-read-only t))
        (ansi-color-apply-on-region (point-min) (point-max))))
  (add-hook 'compilation-filter-hook #'+compilation-colorize))
#+end_src

** yaml-mode
#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t
    )
#+end_src

** perspective
#+begin_quote
The Perspective package provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers like Awesome and XMonad, and Spaces on the Mac.

https://github.com/nex3/perspective-el
#+end_quote

#+begin_src emacs-lisp
  (use-package perspective
    :defer t
    :commands persp-switch
    :general
    (global-leader
      "pP" 'persp-switch)
    :config
    (progn
      (setq persp-state-default-file  (expand-file-name "persp-save-file.el" user-emacs-directory))
      (add-hook 'kill-emacs-hook #'persp-state-save)
      (unless (equal persp-mode t)
	(persp-mode)))
    )
#+end_src

** dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :demand t
    :init
    (progn
      (add-hook 'dashboard-mode-hook #'(lambda () (setq-local global-hl-line-mode nil))))
    :config
    (progn
  (setq dashboard-startup-banner
	    (expand-file-name "emacs.svg" (expand-file-name "media" user-emacs-directory)))
      (setq dashboard-items '((recents  . 5)
			      (projects . 5))
	    dashboard-set-heading-icons t
	    dashboard-set-file-icons t)
      (dashboard-setup-startup-hook)))
#+end_src

** all-the-icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :defer t)
#+end_src

** treemacs
#+begin_quote
Treemacs is a file and project explorer similar to NeoTree or vim’s NerdTree, but largely inspired by the Project Explorer in Eclipse.

https://github.com/Alexander-Miller/treemacs
#+end_quote

Currently treemacs is only supported in projects by toggling the treemacs window.
Further todos would be to make it possible to switch projects correctly (e.g. activating projectile-after-switch-project-hook) with treemacs.

#+begin_src emacs-lisp 
  
  (use-package treemacs :defer t
    :commands (treemacs-select-window
	       treemacs-current-visibility)
    :init
    (progn
      ;; copied from spacemacs
      (defun sys/treemacs-project-toggle ()
	"Toggle and add the current project to treemacs if not already added."
	(interactive)
	(if (eq (treemacs-current-visibility) 'visible)
	    (delete-window (treemacs-get-local-window))
	  (let ((path (projectile-ensure-project (projectile-project-root)))
		(name (projectile-project-name)))
	    (unless (treemacs-current-workspace)
	      (treemacs--find-workspace))
	    (treemacs-do-add-project-to-workspace path name)
	    (treemacs-select-window)))))
    :config
    (progn
      (require 'all-the-icons)
      (require 'treemacs-all-the-icons)
      (treemacs-load-theme 'all-the-icons))
    :general
    (global-leader
      "pt" 'sys/treemacs-project-toggle))
  
  (use-package treemacs-all-the-icons
    :defer t)
#+end_src


